const Sequelize = require('sequelize');
import {sequelize} from "application/Initializer";
import winston from "framework/Logger";;
const _wait = require("wait.for");

const Migration = sequelize.define('Migration', ({
    version: {type: Sequelize.STRING, unique: true}
}));

sequelize.sync();

export function BeforeMigrate(name: string) {
    return new Promise((resolve: any, reject: any) => {
        Migration.findOne({where: {version: name}})
        .then((resp) => {
            if (resp) {
                reject(`=== Migration ${name} has already been added ===`);
            } else {
                resolve(`=== Migration ${name} will be added ===`);
            }
        }).catch((err) => {
            console.log(err);
            reject(err);
        })
    });
}

export function AfterMigrate(name: string) {
    return new Promise((resolve: any, reject: any) => {
        const migration = Migration.build({
            version: name,
        });
        migration.save()
        .then((response) => {
            resolve(`=== Migration ${name} has been added successfully ===`);
        }).catch((err) => {
            console.log(err);
            reject(err);
        })
    });
}

export function Migrate(migrationName: string, callback: any) {
    return new Promise((resolve: any, reject: any) => {
        _wait.launchFiber(() => {
            BeforeMigrate(migrationName)
            .then((resp) => {
                winston.log('audit',resp);
                _wait.launchFiber(() => {
                    const resp = callback();
                    resp.then((r) => {
                        AfterMigrate(migrationName)
                        .then((resp) => {
                            winston.log(resp);
                            resolve('OK')
                        })
                        .catch((err) => {
                            winston.error(err);
                            reject(err);
                        });
                    }).catch((err) => console.log(err));
                });
            })
            .catch((error) => {
                winston.log(error);
                resolve("OK");
            });
        });
    });
}
