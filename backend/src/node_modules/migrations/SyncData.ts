import {Migrate} from 'migrations/Migration';
import winston from "framework/Logger";;
const md5 = require("md5");
// Import Table Define
import {UserImpl} from "domain/user/User";
import {BankImpl} from "domain/bank/Bank";

export function upSync() {
    return new Promise((resolve: any, reject: any) => {
        /*
        UserImpl.SCHEMA.hasMany(BuyOrderImpl.SCHEMA, {foreignKey: 'userId'});
        BuyOrderImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {foreignKey: 'userId'});

        UserImpl.SCHEMA.hasMany(SellOrderImpl.SCHEMA, {foreignKey: 'userId'});
        SellOrderImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {foreignKey: 'userId'});

        UserImpl.SCHEMA.hasMany(WithDrawRequestImpl.SCHEMA, {foreignKey: 'userId'});
        WithDrawRequestImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {foreignKey: 'userId'});

        UserImpl.SCHEMA.hasMany(IncomingRequestImpl.SCHEMA, {foreignKey: 'userId'});
        IncomingRequestImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {foreignKey: 'userId'});

        UserImpl.SCHEMA.hasMany(BuyRequestImpl.SCHEMA, {as: 'buyRequestOfBuyer', foreignKey: 'buyerId'});
        BuyRequestImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {as: 'buyer', foreignKey: 'buyerId'});

        UserImpl.SCHEMA.hasMany(BuyRequestImpl.SCHEMA, {as: 'buyRequestOfOwner', foreignKey: 'ownerId'})
        BuyRequestImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {as: 'owner', foreignKey: 'ownerId'});

        BuyOrderImpl.SCHEMA.hasMany(BuyRequestImpl.SCHEMA, {foreignKey: 'buyOrderId'});
        BuyRequestImpl.SCHEMA.belongsTo(BuyOrderImpl.SCHEMA, {foreignKey: 'buyOrderId'})

        UserImpl.SCHEMA.hasMany(SellRequestImpl.SCHEMA, {as: 'sellRequestOfSeller', foreignKey: 'sellerId'});
        SellRequestImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {as: 'seller', foreignKey: 'sellerId'});

        UserImpl.SCHEMA.hasMany(SellRequestImpl.SCHEMA, {as: 'sellRequestOfOwner', foreignKey: 'ownerId'});
        SellRequestImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {as: 'owner', foreignKey: 'ownerId'});

        SellOrderImpl.SCHEMA.hasMany(SellRequestImpl.SCHEMA, {foreignKey: 'sellOrderId'});
        SellRequestImpl.SCHEMA.belongsTo(SellOrderImpl.SCHEMA, {foreignKey: 'sellOrderId'});

        UserImpl.SCHEMA.hasMany(TransactionImpl.SCHEMA, {as: 'transactionsFromUser', foreignKey: 'fromUserId'});
        TransactionImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {as: 'fromUser', foreignKey: 'fromUserId'})

        UserImpl.SCHEMA.hasMany(TransactionImpl.SCHEMA, {as: 'transacttionsToUser', foreignKey: 'toUserId'});
        TransactionImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {as: 'toUser', foreignKey: 'fromUserId'})

        BuyRequestImpl.SCHEMA.hasOne(TransactionImpl.SCHEMA, {foreignKey: 'buyRequestId'});
        TransactionImpl.SCHEMA.belongsTo(BuyRequestImpl.SCHEMA, {foreignKey: 'buyRequestId'});

        BuyRequestImpl.SCHEMA.hasMany(ConfirmImpl.SCHEMA, {foreignKey: 'buyRequestId'});
        ConfirmImpl.SCHEMA.belongsTo(BuyRequestImpl.SCHEMA, {foreignKey: 'buyRequestId'});

        SellRequestImpl.SCHEMA.hasOne(TransactionImpl.SCHEMA, {foreignKey: 'sellRequestId'});
        TransactionImpl.SCHEMA.belongsTo(SellRequestImpl.SCHEMA, {foreignKey: 'sellRequestId'});

        SellRequestImpl.SCHEMA.hasMany(ConfirmImpl.SCHEMA, {foreignKey: 'sellRequestId'});
        ConfirmImpl.SCHEMA.belongsTo(SellRequestImpl.SCHEMA, {foreignKey: 'sellRequestId'});

        WithDrawRequestImpl.SCHEMA.hasOne(TransactionImpl.SCHEMA, {foreignKey: 'withdrawRequestId'});
        TransactionImpl.SCHEMA.belongsTo(WithDrawRequestImpl.SCHEMA, {foreignKey: 'withdrawRequestId'});

        WithDrawRequestImpl.SCHEMA.hasMany(ConfirmImpl.SCHEMA, {foreignKey: 'withdrawRequestId'});
        WithDrawRequestImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {foreignKey: 'userId'});

        IncomingRequestImpl.SCHEMA.hasOne(TransactionImpl.SCHEMA, {foreignKey: 'incomingRequestId'});
        TransactionImpl.SCHEMA.belongsTo(IncomingRequestImpl.SCHEMA, {foreignKey: 'incomingRequestId'});

        SellRequestImpl.SCHEMA.hasOne(PaymentImpl.SCHEMA,  {foreignKey: 'sellRequestId'});
        PaymentImpl.SCHEMA.belongsTo(SellRequestImpl.SCHEMA, {foreignKey: 'sellRequestId'});

        BuyRequestImpl.SCHEMA.hasOne(PaymentImpl.SCHEMA, {foreignKey: 'buyRequestId'});
        PaymentImpl.SCHEMA.belongsTo(BuyRequestImpl.SCHEMA, {foreignKey: 'buyRequestId'});

        UserImpl.SCHEMA.hasMany(TicketImpl.SCHEMA, {foreignKey: 'userId'});
        TicketImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {foreignKey: 'userId'});

        BuyRequestImpl.SCHEMA.hasMany(TicketImpl.SCHEMA, {foreignKey: 'buyRequestId'});
        TicketImpl.SCHEMA.belongsTo(BuyRequestImpl.SCHEMA, {foreignKey: 'buyRequestId'});

        SellRequestImpl.SCHEMA.hasMany(TicketImpl.SCHEMA, {foreignKey: 'sellRequestId'});
        TicketImpl.SCHEMA.belongsTo(SellRequestImpl.SCHEMA, {foreignKey: 'sellRequestId'});

        UserImpl.SCHEMA.hasMany(NotificationImpl.SCHEMA, {foreignKey: 'userId'});
        NotificationImpl.SCHEMA.belongsTo(UserImpl.SCHEMA, {foreignKey: 'userId'});
        */
        resolve('Sync Success');
    });
}
