import {Bank, BankImpl, BankFromRecord} from "domain/bank/Bank";
import WaitFor from "framework/WaitFor";
const Promise = require("promise");
import {UnauthorizationException, ObjectAlreadyExist, InvalidArgumentException} from "domain/Exception";
import {CrudGateway, MakeCrudGateway} from "gateway/CrudGateway";


export function MakeBankGateway(schema?: any, wait?: any, crud?: CrudGateway<Bank>) {
    return new BankGateway(schema || BankImpl.SCHEMA, wait || WaitFor,
    crud || MakeCrudGateway<Bank>(schema || BankImpl.SCHEMA, BankFromRecord));
}

export class BankGateway {

    private schema: any;
    private wait: any;
    private crud: CrudGateway<Bank>;

    constructor(schema: any, wait: any, crud: CrudGateway<Bank>) {
        this.schema = schema;
        this.wait = wait;
        this.crud = crud;
    }

    public create(bank: Bank): Bank {
        return this.crud.create(bank);
    }

    public findAll(): Bank[] {
        return this.crud.findAll();
    }

}
