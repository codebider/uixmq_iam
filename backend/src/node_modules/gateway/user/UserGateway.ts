import {User, UserImpl, UserFromRecord, UpdateUserData} from "domain/user/User";
import WaitFor from "framework/WaitFor";
const Promise = require("promise");
import {UnauthorizationException, ObjectAlreadyExist, InvalidArgumentException} from "domain/Exception";
import {CrudGateway, MakeCrudGateway} from "gateway/CrudGateway";

export function MakeUserGateway(schema?: any, wait?: any, crud?: CrudGateway<User>) {
    return new UserGateway(schema || UserImpl.SCHEMA, wait || WaitFor,
    crud || MakeCrudGateway<User>(schema || UserImpl.SCHEMA, UserFromRecord));
}

export class UserGateway {

    private schema: any;
    private wait: any;
    private crud: CrudGateway<User>;
    constructor(schema: any, wait: any, crud: CrudGateway<User>) {
        this.schema = schema;
        this.wait = wait;
        this.crud = crud;
    }

    public create(user: User): User {
        if (user === null || user === undefined) throw new InvalidArgumentException('Cannot create user with invalid user');
        
        if (user.record.email && this.crud.findAllWithFilter({'email': user.record.email}).length > 0) {
            throw new ObjectAlreadyExist("Email already exists")
        }
        return this.crud.create(user);
    }

    public update(user: User) {
        if (user === null || user === undefined) throw new InvalidArgumentException('Cannot update user with invalid user');
        return this.crud.update(user);
    }

    public findOneById(id: string) {
        if (id === null || id === undefined || id === '') throw new InvalidArgumentException('Cannot find user with invalid id');
        return this.crud.findById(id);
    }

    public findOneByEmail(email: string) {
        if (email === null || email === undefined || email === '') throw new InvalidArgumentException('Cannot find user with invalid email');
        return this.crud.findWithFilter({'email.email': email})
    }

    public validateUsername(username: string) {
        const self = this;
        const user = this.wait(new Promise((resolve, reject) => {
            self.schema.findOne({where: {username: username}, raw: true}).exec(function(err, user) {
                if (err) reject(err);
                resolve(user);
            })
        }));
        if (user) {
            return {validate: true};
        } else {
            return {validate: false};
        }
    };

    public validateEmailAndPassword(email: string, password_hash: string) {
        return this.crud.findWithFilter({'email': email, 'password': password_hash});
    }

    public validatePhoneAndPassword(phoneNumber: string, password_hash: string) {
        return this.crud.findWithFilter({'phone': phoneNumber, 'password': password_hash});
    }

    public updateAttributes(user: UpdateUserData) {
        return this.crud.updateAttributes(user);
    }
}
