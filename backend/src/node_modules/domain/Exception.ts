export class Exception extends Error {
    private _statusCode: number;
    private key: string;

    constructor(msg: string, key: string) {
        super(msg);
        this._statusCode = 500;
        this.message = msg;
        this.key = key;
    }

    set statusCode(code: number) {
        this._statusCode = code;
    }

    get statusCode() {
        return this._statusCode;
    }

    public toJSON() {
        return {
            code: this._statusCode,
            message: this.message,
            key: this.key
        };
    }
}

export class UnauthorizationException extends Exception {
    constructor(msg: string, key: string = null) {
        super(msg, key);
        this.statusCode = 401;
    }
}

export class ObjectAlreadyExist extends Exception {
    constructor(msg: string, key: string = null) {
        super(msg, key);
        this.statusCode = 409;
    }
}

export class InvalidStatusException extends Exception {
    constructor(msg: string, key: string = null) {
        super(msg, key);
        this.statusCode = 402;
    }
}

export class InvalidArgumentException extends Exception {
    constructor(msg: string, key: string = null) {
        super(msg, key);
        this.statusCode = 400;
    }
}

export class InvalidPermissionException extends Exception {
    constructor(msg: string, key: string = null) {
        super(msg, key);
        this.statusCode = 406;
    }
}

export class ObjectNotFoundException extends Exception {
    constructor(msg: string, key: string = null) {
        super(msg, key);
        this.statusCode = 404;
    }
}
