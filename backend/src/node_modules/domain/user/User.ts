import * as console from 'console';
const Sequelize = require('sequelize');
import {sequelize} from "application/Initializer";
import {MakeGenerateID} from "framework/GenerateID";
import { Entity } from "domain/Entity";
import { InvalidArgumentException } from "domain/Exception";
const md5 = require("md5");

export interface CreateUserData {
    id?: string;
    password: string;
    type?: string;
    name?: string;
    email: string;
    createdAt?: Date;
    updatedAt?: Date;
}

export interface UpdateUserData {
    id: string;
    password: string;
    type?: string;
    name?: string;
    email: string;
    updatedAt?: Date;
}

export interface User extends Entity {
    getEmail(): string;
    getType(): string;
    getHashPassword(password: string): string;
    isAdmin(): boolean;
    isClient(): boolean;
    isCoach(): boolean;
}

export function UserFromRecord(record: any): User {
    return new UserImpl(record);
}

export function CreateUser(data: CreateUserData): User {
    return new UserImpl(UserImpl.SCHEMA.build({
        id: data.id || MakeGenerateID().getId(),
        type: data.type,
        password: data.password,
        name: data.name,
        email: data.email,
        createdAt: data.createdAt,
        updatedAt: data.updatedAt
    }));
}

export class UserImpl implements User {

    private _record: any;

    constructor(record: any) {
        this._record = record;
    }

    get record(): any {
        return this._record;
    }

    public static SCHEMA = sequelize.define('user', {
        id: { type: Sequelize.STRING, primaryKey: true, unique: true },
        email: { type: Sequelize.STRING, unique: true, allowNull: false },
        password: { type: Sequelize.STRING, allowNull: false },
        type: { 
            type: Sequelize.ENUM,
            values: ['admin', 'coach', 'client'],
            defaultValue: 'client'
        },
        name: { type: Sequelize.STRING },
        createdAt: { type: Sequelize.DATE, defaultValue: new Date() },
        updatedAt: { type: Sequelize.DATE, defaultValue: new Date() }
    });

    public toJSON() {
        return {
            id: this.record.id,
            name: this.record.name,
            email: this.record.email,
            type: this.record.type
        };
    }

    public exists(): boolean {
        return this.record;
    }

    public getId(): string {
        return this.record.id;
    }

    public getType(): string {
        return this.record.type;
    }

    public getEmail(): string {
        return this.record.email;
    }

    public getHashPassword(password: string = '') {
        return md5(password);
    }

    public isAdmin(): boolean {
        return this.record.type === 'admin' ? true : false;
    }

    public isClient(): boolean {
        return this.record.type === 'client' ? true : false;
    }

    public isCoach(): boolean {
        return this.record.type === 'coach' ? true : false;
    }
}
