import * as console from 'console';
const Sequelize = require('sequelize');
import {sequelize} from "application/Initializer";
import {MakeGenerateID} from "framework/GenerateID";
import { Entity } from "domain/Entity";
import { InvalidArgumentException } from "domain/Exception";

export interface CreateBankData {
    id?: string;
    shortName: string;
    fullName?: string;
    englishName?: string;
}

export interface Bank extends Entity {
}

export function BankFromRecord(record: any): Bank {
    return new BankImpl(record);
}

export function CreateBank(data: CreateBankData): Bank {
    return new BankImpl(BankImpl.SCHEMA.build({
        id: data.id || MakeGenerateID().getId(),
        shortName: data.shortName,
        fullName: data.fullName,
        englishName: data.englishName,
    }));
}

export class BankImpl implements Bank {

    private _record: any;

    constructor(record: any) {
        this._record = record;;
    }

    get record(): any {
        return this._record;
    }

    public static SCHEMA = sequelize.define('Bank', ({
        id: { type: Sequelize.STRING, allowNull: false, unique: true, primaryKey: true },
        shortName: { type: Sequelize.STRING },
        fullName: { type: Sequelize.STRING },
        englishName: { type: Sequelize.STRING }
    }));

    public toJSON() {
        return {
            id: this.record.id,
            shortName: this.record.shortName,
            fullName: this.record.fullName,
            englishName: this.record.englishName
        };
    }

    public getId(): string {
        return this.record.id;
    }
}
