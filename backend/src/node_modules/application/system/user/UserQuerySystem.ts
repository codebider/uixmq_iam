import {UserGateway, MakeUserGateway} from "gateway/user/UserGateway";
import {CreateUser, CreateUserData, User} from "domain/user/User";
import {JWT, MakeJWT} from "framework/JWT";
const md5 = require("md5");

export function MakeUserQuerySystem(
    gateway?: UserGateway,
    jwt?: any
) {
    return new UserQuerySystem(
        gateway || MakeUserGateway(),
        jwt || MakeJWT()
    );
}

class UserQuerySystem {
    private gateway: UserGateway;
    private jwt: any;

    constructor(
        gateway: UserGateway,
        jwt: any
    ) {
        this.gateway = gateway;
        this.jwt = jwt;
    }

    public findById(userId: string) {
        return this.gateway.findOneById(userId);
    }

    public login(authObject: any) {
        let user: any;
        const passwordHash = md5(authObject.password);
        user = this.gateway.validateEmailAndPassword(authObject.email, passwordHash);
        const data = {
            uId: user.getId(),
            uT: user.getType(), 
            ttl: 60*60*1000 + new Date().getTime()
        };

        return {
            token: this.jwt.encode(data),
            user: user
        }
    }
}
